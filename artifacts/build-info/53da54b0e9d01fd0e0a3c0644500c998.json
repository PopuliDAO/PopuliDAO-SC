{
	"id": "53da54b0e9d01fd0e0a3c0644500c998",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"WorldVerify.sol": {
				"content": "//SPDX-License-Identifier\n\nimport { IWorldID } from \"./interfaces/IWorldID.sol\";\n\npragma solidity ^0.8.20;\n\n\ncontract WorldVerify {\n\n    mapping(address => uint256) AddressToWorldID;\n    mapping(uint256 => address) WorldIDToAddress;\n    \n\n    ////////////////////////////////////////////////////////////////////////////////\n\t///                                  ERRORS                                ///\n\t//////////////////////////////////////////////////////////////////////////////\n\n    error WorldIDAlreadyUsed();\n\n    /// @dev The World ID instance that will be used for verifying proofs\n\tIWorldID internal immutable worldId;\n\n    /// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\n\tmapping(uint256 => bool) internal nullifierHashes;  \n    \n\n}"
			},
			"interfaces/IWorldID.sol": {
				"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"WorldVerify.sol": {
				"WorldVerify": {
					"abi": [
						{
							"inputs": [],
							"name": "WorldIDAlreadyUsed",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"nullifierHashes": {
								"details": "Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person"
							},
							"worldId": {
								"details": "The World ID instance that will be used for verifying proofs"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"WorldVerify.sol\":109:823  contract WorldVerify {... */\n  mstore(0x40, 0xa0)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x8fef2229291b68be841adf029e58b87f39ba144b2d3b0af1760243d0a9bc6a1c\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"WorldVerify.sol\":109:823  contract WorldVerify {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205b4b8b51ef72cea17e38cb7c179a4212365133ad3c2f84d7c93952aa60adc16864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60a0604052348015600e575f80fd5b50608051603e60215f395f5050603e5ff3fe60806040525f80fdfea26469706673582212205b4b8b51ef72cea17e38cb7c179a4212365133ad3c2f84d7c93952aa60adc16864736f6c634300081a0033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x3E PUSH1 0x21 PUSH0 CODECOPY PUSH0 POP POP PUSH1 0x3E PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0x4B DUP12 MLOAD 0xEF PUSH19 0xCEA17E38CB7C179A4212365133AD3C2F84D7C9 CODECOPY MSTORE 0xAA PUSH1 0xAD 0xC1 PUSH9 0x64736F6C634300081A STOP CALLER ",
							"sourceMap": "109:714:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea26469706673582212205b4b8b51ef72cea17e38cb7c179a4212365133ad3c2f84d7c93952aa60adc16864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0x4B DUP12 MLOAD 0xEF PUSH19 0xCEA17E38CB7C179A4212365133AD3C2F84D7C9 CODECOPY MSTORE 0xAA PUSH1 0xAD 0xC1 PUSH9 0x64736F6C634300081A STOP CALLER ",
							"sourceMap": "109:714:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 823,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205b4b8b51ef72cea17e38cb7c179a4212365133ad3c2f84d7c93952aa60adc16864736f6c634300081a0033",
									".code": [
										{
											"begin": 109,
											"end": 823,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 109,
											"end": 823,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 109,
											"end": 823,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 109,
											"end": 823,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 823,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 109,
											"end": 823,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"WorldVerify.sol",
								"interfaces/IWorldID.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WorldIDAlreadyUsed\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\"},\"worldId\":{\"details\":\"The World ID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"WorldIDAlreadyUsed()\":[{\"notice\":\"ERRORS                                ///\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"WorldVerify.sol\":\"WorldVerify\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"WorldVerify.sol\":{\"keccak256\":\"0x64ccb5cda4c33822286fa4e90989082e99d41ef7fee517b2fe6aaded77eaecfc\",\"urls\":[\"bzz-raw://ce6b00cf718cdcb4706f46d54da96847c54d8d0733c43679721025546f965cde\",\"dweb:/ipfs/QmeexZ3dwavWkmLr8H9NcoKmsw3AiTd9vD4KqyKpcxXpFb\"]},\"interfaces/IWorldID.sol\":{\"keccak256\":\"0xcdf085f9dde0e090068213435aed0c1cf055ff29cc68d41085184c5085ec8079\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52161cbb1bd089e0d95f176319d3ed18afdb0c0741a25ffb72600ea0b754a5ea\",\"dweb:/ipfs/QmaAVrX7ihyeMT8pcKLrH3JU8bTdw736pkkckUdyFCuVuf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "WorldVerify.sol:WorldVerify",
								"label": "AddressToWorldID",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 11,
								"contract": "WorldVerify.sol:WorldVerify",
								"label": "WorldIDToAddress",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 23,
								"contract": "WorldVerify.sol:WorldVerify",
								"label": "nullifierHashes",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"WorldIDAlreadyUsed()": [
								{
									"notice": "ERRORS                                ///"
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IWorldID.sol": {
				"IWorldID": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "root",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "groupId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "signalHash",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "nullifierHash",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "externalNullifierHash",
									"type": "uint256"
								},
								{
									"internalType": "uint256[8]",
									"name": "proof",
									"type": "uint256[8]"
								}
							],
							"name": "verifyProof",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {
								"details": "Note that a double-signaling check is not included here, and should be carried by the caller.",
								"params": {
									"externalNullifierHash": "A keccak256 hash of the external nullifier",
									"groupId": "The id of the Semaphore group",
									"nullifierHash": "The nullifier hash",
									"proof": "The zero-knowledge proof",
									"root": "The of the Merkle tree",
									"signalHash": "A keccak256 hash of the Semaphore signal"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": "3bc778e3"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signalHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalNullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])\":{\"details\":\"Note that a double-signaling check is not included here, and should be carried by the caller.\",\"params\":{\"externalNullifierHash\":\"A keccak256 hash of the external nullifier\",\"groupId\":\"The id of the Semaphore group\",\"nullifierHash\":\"The nullifier hash\",\"proof\":\"The zero-knowledge proof\",\"root\":\"The of the Merkle tree\",\"signalHash\":\"A keccak256 hash of the Semaphore signal\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])\":{\"notice\":\"Reverts if the zero-knowledge proof is invalid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IWorldID.sol\":\"IWorldID\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IWorldID.sol\":{\"keccak256\":\"0xcdf085f9dde0e090068213435aed0c1cf055ff29cc68d41085184c5085ec8079\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52161cbb1bd089e0d95f176319d3ed18afdb0c0741a25ffb72600ea0b754a5ea\",\"dweb:/ipfs/QmaAVrX7ihyeMT8pcKLrH3JU8bTdw736pkkckUdyFCuVuf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {
								"notice": "Reverts if the zero-knowledge proof is invalid."
							}
						},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> WorldVerify.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "WorldVerify.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"WorldVerify.sol": {
				"ast": {
					"absolutePath": "WorldVerify.sol",
					"exportedSymbols": {
						"IWorldID": [
							45
						],
						"WorldVerify": [
							24
						]
					},
					"id": 25,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"absolutePath": "interfaces/IWorldID.sol",
							"file": "./interfaces/IWorldID.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 25,
							"sourceUnit": 46,
							"src": "27:53:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1,
										"name": "IWorldID",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 45,
										"src": "36:8:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"id": 3,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "82:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "WorldVerify",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 24,
							"linearizedBaseContracts": [
								24
							],
							"name": "WorldVerify",
							"nameLocation": "118:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "AddressToWorldID",
									"nameLocation": "165:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 24,
									"src": "137:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 4,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "145:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "137:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 5,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "156:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "WorldIDToAddress",
									"nameLocation": "215:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 24,
									"src": "187:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 10,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 8,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "195:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "187:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 9,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "206:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "325:78:0",
										"text": "ERRORS                                ///"
									},
									"errorSelector": "ae56d952",
									"id": 14,
									"name": "WorldIDAlreadyUsed",
									"nameLocation": "495:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:0"
									},
									"src": "489:27:0"
								},
								{
									"constant": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "522:69:0",
										"text": "@dev The World ID instance that will be used for verifying proofs"
									},
									"id": 18,
									"mutability": "immutable",
									"name": "worldId",
									"nameLocation": "621:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 24,
									"src": "593:35:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IWorldID_$45",
										"typeString": "contract IWorldID"
									},
									"typeName": {
										"id": 17,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 16,
											"name": "IWorldID",
											"nameLocations": [
												"593:8:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 45,
											"src": "593:8:0"
										},
										"referencedDeclaration": 45,
										"src": "593:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IWorldID_$45",
											"typeString": "contract IWorldID"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 19,
										"nodeType": "StructuredDocumentation",
										"src": "635:126:0",
										"text": "@dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person"
									},
									"id": 23,
									"mutability": "mutable",
									"name": "nullifierHashes",
									"nameLocation": "797:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 24,
									"src": "763:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
										"typeString": "mapping(uint256 => bool)"
									},
									"typeName": {
										"id": 22,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 20,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "771:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "763:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
											"typeString": "mapping(uint256 => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 21,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "782:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 25,
							"src": "109:714:0",
							"usedErrors": [
								14
							],
							"usedEvents": []
						}
					],
					"src": "27:796:0"
				},
				"id": 0
			},
			"interfaces/IWorldID.sol": {
				"ast": {
					"absolutePath": "interfaces/IWorldID.sol",
					"exportedSymbols": {
						"IWorldID": [
							45
						]
					},
					"id": 46,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 26,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".10"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IWorldID",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 45,
							"linearizedBaseContracts": [
								45
							],
							"name": "IWorldID",
							"nameLocation": "67:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "82:504:1",
										"text": "@notice Reverts if the zero-knowledge proof is invalid.\n @param root The of the Merkle tree\n @param groupId The id of the Semaphore group\n @param signalHash A keccak256 hash of the Semaphore signal\n @param nullifierHash The nullifier hash\n @param externalNullifierHash A keccak256 hash of the external nullifier\n @param proof The zero-knowledge proof\n @dev  Note that a double-signaling check is not included here, and should be carried by the caller."
									},
									"functionSelector": "3bc778e3",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "verifyProof",
									"nameLocation": "600:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "629:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "621:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 28,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "621:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "groupId",
												"nameLocation": "651:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "643:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 30,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "signalHash",
												"nameLocation": "676:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "668:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "nullifierHash",
												"nameLocation": "704:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "696:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "696:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "externalNullifierHash",
												"nameLocation": "735:21:1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "727:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "727:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "786:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "766:25:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
													"typeString": "uint256[8]"
												},
												"typeName": {
													"baseType": {
														"id": 38,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "766:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 40,
													"length": {
														"hexValue": "38",
														"id": 39,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "774:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"nodeType": "ArrayTypeName",
													"src": "766:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$8_storage_ptr",
														"typeString": "uint256[8]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "611:186:1"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "811:0:1"
									},
									"scope": 45,
									"src": "591:221:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 46,
							"src": "57:757:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "31:783:1"
				},
				"id": 1
			}
		}
	}
}