{
	"id": "b207249c6d5a05ce502099d92a243acc",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"WorldVerify.sol": {
				"content": "//SPDX-License-Identifier\n\nimport { IWorldID } from \"./interfaces/IWorldID.sol\";\n\npragma solidity ^0.8.20;\n\n\ncontract WorldVerify {\n\n    mapping(address => uint256) AddressToWorldID;\n    mapping(uint256 => address) WorldIDToAddress;\n\n    \n\n}"
			},
			"interfaces/IWorldID.sol": {
				"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"WorldVerify.sol": {
				"WorldVerify": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"WorldVerify.sol\":109:241  contract WorldVerify {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"WorldVerify.sol\":109:241  contract WorldVerify {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220eda707278a9347049105f6c7408a1a29bed0fc8ed4ff2ccf9c37827563594e1f64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea2646970667358221220eda707278a9347049105f6c7408a1a29bed0fc8ed4ff2ccf9c37827563594e1f64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xA7 SMOD 0x27 DUP11 SWAP4 SELFBALANCE DIV SWAP2 SDIV 0xF6 0xC7 BLOCKHASH DUP11 BYTE 0x29 0xBE 0xD0 0xFC DUP15 0xD4 SELFDESTRUCT 0x2C 0xCF SWAP13 CALLDATACOPY DUP3 PUSH22 0x63594E1F64736F6C634300081A003300000000000000 ",
							"sourceMap": "109:132:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea2646970667358221220eda707278a9347049105f6c7408a1a29bed0fc8ed4ff2ccf9c37827563594e1f64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xA7 SMOD 0x27 DUP11 SWAP4 SELFBALANCE DIV SWAP2 SDIV 0xF6 0xC7 BLOCKHASH DUP11 BYTE 0x29 0xBE 0xD0 0xFC DUP15 0xD4 SELFDESTRUCT 0x2C 0xCF SWAP13 CALLDATACOPY DUP3 PUSH22 0x63594E1F64736F6C634300081A003300000000000000 ",
							"sourceMap": "109:132:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 109,
									"end": 241,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 241,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220eda707278a9347049105f6c7408a1a29bed0fc8ed4ff2ccf9c37827563594e1f64736f6c634300081a0033",
									".code": [
										{
											"begin": 109,
											"end": 241,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 109,
											"end": 241,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 109,
											"end": 241,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 109,
											"end": 241,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 241,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 109,
											"end": 241,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"WorldVerify.sol",
								"interfaces/IWorldID.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"WorldVerify.sol\":\"WorldVerify\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"WorldVerify.sol\":{\"keccak256\":\"0xcae6154737138e10d90f99bc4e8fec0beb88203bd725cd8b0443a9608abfb21d\",\"urls\":[\"bzz-raw://d602bbc673f9d3a9ece2756fa568c2529253175def44a928c060849d1ce61bd3\",\"dweb:/ipfs/Qma7mwfGSEjgSTGrvDCtzHyGoxjiM4tHu3o5QsVoEicpod\"]},\"interfaces/IWorldID.sol\":{\"keccak256\":\"0xcdf085f9dde0e090068213435aed0c1cf055ff29cc68d41085184c5085ec8079\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52161cbb1bd089e0d95f176319d3ed18afdb0c0741a25ffb72600ea0b754a5ea\",\"dweb:/ipfs/QmaAVrX7ihyeMT8pcKLrH3JU8bTdw736pkkckUdyFCuVuf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "WorldVerify.sol:WorldVerify",
								"label": "AddressToWorldID",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 11,
								"contract": "WorldVerify.sol:WorldVerify",
								"label": "WorldIDToAddress",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_address)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IWorldID.sol": {
				"IWorldID": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "root",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "groupId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "signalHash",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "nullifierHash",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "externalNullifierHash",
									"type": "uint256"
								},
								{
									"internalType": "uint256[8]",
									"name": "proof",
									"type": "uint256[8]"
								}
							],
							"name": "verifyProof",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {
								"details": "Note that a double-signaling check is not included here, and should be carried by the caller.",
								"params": {
									"externalNullifierHash": "A keccak256 hash of the external nullifier",
									"groupId": "The id of the Semaphore group",
									"nullifierHash": "The nullifier hash",
									"proof": "The zero-knowledge proof",
									"root": "The of the Merkle tree",
									"signalHash": "A keccak256 hash of the Semaphore signal"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": "3bc778e3"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signalHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalNullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])\":{\"details\":\"Note that a double-signaling check is not included here, and should be carried by the caller.\",\"params\":{\"externalNullifierHash\":\"A keccak256 hash of the external nullifier\",\"groupId\":\"The id of the Semaphore group\",\"nullifierHash\":\"The nullifier hash\",\"proof\":\"The zero-knowledge proof\",\"root\":\"The of the Merkle tree\",\"signalHash\":\"A keccak256 hash of the Semaphore signal\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])\":{\"notice\":\"Reverts if the zero-knowledge proof is invalid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IWorldID.sol\":\"IWorldID\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IWorldID.sol\":{\"keccak256\":\"0xcdf085f9dde0e090068213435aed0c1cf055ff29cc68d41085184c5085ec8079\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52161cbb1bd089e0d95f176319d3ed18afdb0c0741a25ffb72600ea0b754a5ea\",\"dweb:/ipfs/QmaAVrX7ihyeMT8pcKLrH3JU8bTdw736pkkckUdyFCuVuf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {
								"notice": "Reverts if the zero-knowledge proof is invalid."
							}
						},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> WorldVerify.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "WorldVerify.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"WorldVerify.sol": {
				"ast": {
					"absolutePath": "WorldVerify.sol",
					"exportedSymbols": {
						"IWorldID": [
							33
						],
						"WorldVerify": [
							12
						]
					},
					"id": 13,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"absolutePath": "interfaces/IWorldID.sol",
							"file": "./interfaces/IWorldID.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 13,
							"sourceUnit": 34,
							"src": "27:53:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1,
										"name": "IWorldID",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 33,
										"src": "36:8:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"id": 3,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "82:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "WorldVerify",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 12,
							"linearizedBaseContracts": [
								12
							],
							"name": "WorldVerify",
							"nameLocation": "118:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "AddressToWorldID",
									"nameLocation": "165:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 12,
									"src": "137:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 6,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 4,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "145:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "137:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 5,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "156:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "WorldIDToAddress",
									"nameLocation": "215:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 12,
									"src": "187:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 10,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 8,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "195:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "187:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 9,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "206:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 13,
							"src": "109:132:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "27:214:0"
				},
				"id": 0
			},
			"interfaces/IWorldID.sol": {
				"ast": {
					"absolutePath": "interfaces/IWorldID.sol",
					"exportedSymbols": {
						"IWorldID": [
							33
						]
					},
					"id": 34,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 14,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".10"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IWorldID",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 33,
							"linearizedBaseContracts": [
								33
							],
							"name": "IWorldID",
							"nameLocation": "67:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "82:504:1",
										"text": "@notice Reverts if the zero-knowledge proof is invalid.\n @param root The of the Merkle tree\n @param groupId The id of the Semaphore group\n @param signalHash A keccak256 hash of the Semaphore signal\n @param nullifierHash The nullifier hash\n @param externalNullifierHash A keccak256 hash of the external nullifier\n @param proof The zero-knowledge proof\n @dev  Note that a double-signaling check is not included here, and should be carried by the caller."
									},
									"functionSelector": "3bc778e3",
									"id": 32,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "verifyProof",
									"nameLocation": "600:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "629:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "621:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 16,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "621:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "groupId",
												"nameLocation": "651:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "643:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 18,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "signalHash",
												"nameLocation": "676:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "668:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "nullifierHash",
												"nameLocation": "704:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "696:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 22,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "696:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "externalNullifierHash",
												"nameLocation": "735:21:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "727:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "727:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "786:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "766:25:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
													"typeString": "uint256[8]"
												},
												"typeName": {
													"baseType": {
														"id": 26,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "766:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 28,
													"length": {
														"hexValue": "38",
														"id": 27,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "774:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"nodeType": "ArrayTypeName",
													"src": "766:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$8_storage_ptr",
														"typeString": "uint256[8]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "611:186:1"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "811:0:1"
									},
									"scope": 33,
									"src": "591:221:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 34,
							"src": "57:757:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "31:783:1"
				},
				"id": 1
			}
		}
	}
}